-- SCRIPT MASTER - Quito-Sur
-- ============================
-- Script adaptado para el sistema DataRetail

-- Eliminar triggers primero (por las dependencias)
BEGIN
  FOR trg IN (SELECT trigger_name FROM user_triggers) LOOP
    EXECUTE IMMEDIATE 'DROP TRIGGER ' || trg.trigger_name;
  END LOOP;
END;
/

-- Eliminar secuencias
BEGIN
  FOR seq IN (SELECT sequence_name FROM user_sequences WHERE sequence_name LIKE '%_SEQ') LOOP
    EXECUTE IMMEDIATE 'DROP SEQUENCE ' || seq.sequence_name;
  END LOOP;
END;
/

-- Eliminar tablas
DROP TABLE auditoria_master CASCADE CONSTRAINTS;
DROP TABLE fabrica CASCADE CONSTRAINTS;
DROP TABLE tarjeta CASCADE CONSTRAINTS;
DROP TABLE producto CASCADE CONSTRAINTS;
DROP TABLE empleado_sur CASCADE CONSTRAINTS;
DROP TABLE cliente_chillogallo CASCADE CONSTRAINTS;
DROP TABLE sucursal_qs CASCADE CONSTRAINTS;

-- Crear secuencias para IDs
CREATE SEQUENCE sucursal_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE cliente_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE empleado_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE producto_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE tarjeta_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE fabrica_seq START WITH 1 INCREMENT BY 1;

-- Tablas fragmentadas
CREATE TABLE sucursal_qs (
    id_sucursal NUMBER PRIMARY KEY,
    nombre VARCHAR2(50),
    ciudad VARCHAR2(50),
    direccion VARCHAR2(100),
    CONSTRAINT chk_ciudad_master CHECK (ciudad = 'Quito-Sur')
);

CREATE TABLE cliente_chillogallo (
    id_cliente NUMBER PRIMARY KEY,
    nombre VARCHAR2(100),
    direccion VARCHAR2(100),
    telefono VARCHAR2(20),
    CONSTRAINT chk_direccion_master CHECK (direccion = 'Chillogallo')
);

CREATE TABLE empleado_sur (
    id_empleado NUMBER PRIMARY KEY,
    nombre VARCHAR2(100),
    sucursal VARCHAR2(50),
    cargo VARCHAR2(50),
    CONSTRAINT chk_sucursal_empleado_master CHECK (sucursal = 'Sur')
);

-- Tablas replicadas
CREATE TABLE producto (
    id_producto NUMBER PRIMARY KEY,
    nombre VARCHAR2(100),
    precio NUMBER
);

CREATE TABLE tarjeta (
    id_tarjeta NUMBER PRIMARY KEY,
    tipo VARCHAR2(20),
    numero VARCHAR2(30)
);

CREATE TABLE fabrica (
    id_fabrica NUMBER PRIMARY KEY,
    nombre VARCHAR2(100),
    pais VARCHAR2(50)
);

-- Tabla de auditoría
CREATE TABLE auditoria_master (
    id_auditoria NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    user_name VARCHAR2(100),
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    tipo_operacion CHAR(1),
    nombre_table VARCHAR2(50),
    anterior VARCHAR2(800),
    nuevo VARCHAR2(800)
);

-- Triggers de auditoría
CREATE OR REPLACE TRIGGER trg_audit_sucursal_qs
AFTER DELETE OR INSERT OR UPDATE ON sucursal_qs
FOR EACH ROW
DECLARE 
  v_op VARCHAR2(1);
  v_tabla VARCHAR2(20) := 'sucursal_qs';
  v_anterior VARCHAR2(800);
  v_nuevo VARCHAR2(800);
BEGIN
  IF INSERTING THEN v_op := 'I';
  ELSIF UPDATING THEN v_op := 'U';
  ELSIF DELETING THEN v_op := 'D'; END IF;
  
  IF :OLD.id_sucursal IS NOT NULL THEN
    v_anterior := :OLD.id_sucursal || '|' || :OLD.nombre || '|' || :OLD.ciudad || '|' || :OLD.direccion;
  END IF;
  
  IF :NEW.id_sucursal IS NOT NULL THEN
    v_nuevo := :NEW.id_sucursal || '|' || :NEW.nombre || '|' || :NEW.ciudad || '|' || :NEW.direccion;
  END IF;
  
  INSERT INTO auditoria_master(user_name, fecha, tipo_operacion, nombre_table, anterior, nuevo)
  VALUES (USER, SYSDATE, v_op, v_tabla, v_anterior, v_nuevo);
END;
/

CREATE OR REPLACE TRIGGER trg_audit_cliente_chillogallo
AFTER DELETE OR INSERT OR UPDATE ON cliente_chillogallo
FOR EACH ROW
DECLARE 
  v_op VARCHAR2(1);
  v_tabla VARCHAR2(20) := 'cliente_chillogallo';
  v_anterior VARCHAR2(800);
  v_nuevo VARCHAR2(800);
BEGIN
  IF INSERTING THEN v_op := 'I';
  ELSIF UPDATING THEN v_op := 'U';
  ELSIF DELETING THEN v_op := 'D'; END IF;
  
  IF :OLD.id_cliente IS NOT NULL THEN
    v_anterior := :OLD.id_cliente || '|' || :OLD.nombre || '|' || :OLD.direccion || '|' || :OLD.telefono;
  END IF;
  
  IF :NEW.id_cliente IS NOT NULL THEN
    v_nuevo := :NEW.id_cliente || '|' || :NEW.nombre || '|' || :NEW.direccion || '|' || :NEW.telefono;
  END IF;
  
  INSERT INTO auditoria_master(user_name, fecha, tipo_operacion, nombre_table, anterior, nuevo)
  VALUES (USER, SYSDATE, v_op, v_tabla, v_anterior, v_nuevo);
END;
/

CREATE OR REPLACE TRIGGER trg_audit_empleado_sur
AFTER DELETE OR INSERT OR UPDATE ON empleado_sur
FOR EACH ROW
DECLARE 
  v_op VARCHAR2(1);
  v_tabla VARCHAR2(20) := 'empleado_sur';
  v_anterior VARCHAR2(800);
  v_nuevo VARCHAR2(800);
BEGIN
  IF INSERTING THEN v_op := 'I';
  ELSIF UPDATING THEN v_op := 'U';
  ELSIF DELETING THEN v_op := 'D'; END IF;
  
  IF :OLD.id_empleado IS NOT NULL THEN
    v_anterior := :OLD.id_empleado || '|' || :OLD.nombre || '|' || :OLD.sucursal || '|' || :OLD.cargo;
  END IF;
  
  IF :NEW.id_empleado IS NOT NULL THEN
    v_nuevo := :NEW.id_empleado || '|' || :NEW.nombre || '|' || :NEW.sucursal || '|' || :NEW.cargo;
  END IF;
  
  INSERT INTO auditoria_master(user_name, fecha, tipo_operacion, nombre_table, anterior, nuevo)
  VALUES (USER, SYSDATE, v_op, v_tabla, v_anterior, v_nuevo);
END;
/

CREATE OR REPLACE TRIGGER trg_audit_producto
AFTER DELETE OR INSERT OR UPDATE ON producto
FOR EACH ROW
DECLARE 
  v_op VARCHAR2(1);
  v_tabla VARCHAR2(20) := 'producto';
  v_anterior VARCHAR2(800);
  v_nuevo VARCHAR2(800);
BEGIN
  IF INSERTING THEN v_op := 'I';
  ELSIF UPDATING THEN v_op := 'U';
  ELSIF DELETING THEN v_op := 'D'; END IF;
  
  IF :OLD.id_producto IS NOT NULL THEN
    v_anterior := :OLD.id_producto || '|' || :OLD.nombre || '|' || :OLD.precio;
  END IF;
  
  IF :NEW.id_producto IS NOT NULL THEN
    v_nuevo := :NEW.id_producto || '|' || :NEW.nombre || '|' || :NEW.precio;
  END IF;
  
  INSERT INTO auditoria_master(user_name, fecha, tipo_operacion, nombre_table, anterior, nuevo)
  VALUES (USER, SYSDATE, v_op, v_tabla, v_anterior, v_nuevo);
END;
/

CREATE OR REPLACE TRIGGER trg_audit_tarjeta
AFTER DELETE OR INSERT OR UPDATE ON tarjeta
FOR EACH ROW
DECLARE 
  v_op VARCHAR2(1);
  v_tabla VARCHAR2(20) := 'tarjeta';
  v_anterior VARCHAR2(800);
  v_nuevo VARCHAR2(800);
BEGIN
  IF INSERTING THEN v_op := 'I';
  ELSIF UPDATING THEN v_op := 'U';
  ELSIF DELETING THEN v_op := 'D'; END IF;
  
  IF :OLD.id_tarjeta IS NOT NULL THEN
    v_anterior := :OLD.id_tarjeta || '|' || :OLD.tipo || '|' || :OLD.numero;
  END IF;
  
  IF :NEW.id_tarjeta IS NOT NULL THEN
    v_nuevo := :NEW.id_tarjeta || '|' || :NEW.tipo || '|' || :NEW.numero;
  END IF;
  
  INSERT INTO auditoria_master(user_name, fecha, tipo_operacion, nombre_table, anterior, nuevo)
  VALUES (USER, SYSDATE, v_op, v_tabla, v_anterior, v_nuevo);
END;
/

CREATE OR REPLACE TRIGGER trg_audit_fabrica
AFTER DELETE OR INSERT OR UPDATE ON fabrica
FOR EACH ROW
DECLARE 
  v_op VARCHAR2(1);
  v_tabla VARCHAR2(20) := 'fabrica';
  v_anterior VARCHAR2(800);
  v_nuevo VARCHAR2(800);
BEGIN
  IF INSERTING THEN v_op := 'I';
  ELSIF UPDATING THEN v_op := 'U';
  ELSIF DELETING THEN v_op := 'D'; END IF;
  
  IF :OLD.id_fabrica IS NOT NULL THEN
    v_anterior := :OLD.id_fabrica || '|' || :OLD.nombre || '|' || :OLD.pais;
  END IF;
  
  IF :NEW.id_fabrica IS NOT NULL THEN
    v_nuevo := :NEW.id_fabrica || '|' || :NEW.nombre || '|' || :NEW.pais;
  END IF;
  
  INSERT INTO auditoria_master(user_name, fecha, tipo_operacion, nombre_table, anterior, nuevo)
  VALUES (USER, SYSDATE, v_op, v_tabla, v_anterior, v_nuevo);
END;
/

-- Datos de ejemplo para las tablas
INSERT INTO sucursal_qs VALUES (sucursal_seq.NEXTVAL, 'Sucursal Principal', 'Quito-Sur', 'Av. Pedro Vicente Maldonado 123');
INSERT INTO sucursal_qs VALUES (sucursal_seq.NEXTVAL, 'Sucursal Centro Comercial', 'Quito-Sur', 'CC El Recreo Local 45');

INSERT INTO cliente_chillogallo VALUES (cliente_seq.NEXTVAL, 'Juan Pérez García', 'Chillogallo', '+593-99-123-4567');
INSERT INTO cliente_chillogallo VALUES (cliente_seq.NEXTVAL, 'María Elena González', 'Chillogallo', '+593-98-765-4321');
INSERT INTO cliente_chillogallo VALUES (cliente_seq.NEXTVAL, 'Carlos Rodríguez López', 'Chillogallo', '+593-96-111-2222');

INSERT INTO empleado_sur VALUES (empleado_seq.NEXTVAL, 'Ana Martínez', 'Sur', 'Gerente');
INSERT INTO empleado_sur VALUES (empleado_seq.NEXTVAL, 'Pedro Sánchez', 'Sur', 'Vendedor');
INSERT INTO empleado_sur VALUES (empleado_seq.NEXTVAL, 'Laura Torres', 'Sur', 'Cajera');

INSERT INTO producto VALUES (producto_seq.NEXTVAL, 'Laptop HP Pavilion', 799.99);
INSERT INTO producto VALUES (producto_seq.NEXTVAL, 'Mouse Inalámbrico', 25.50);
INSERT INTO producto VALUES (producto_seq.NEXTVAL, 'Teclado Mecánico', 89.99);
INSERT INTO producto VALUES (producto_seq.NEXTVAL, 'Monitor 24 pulgadas', 299.99);

INSERT INTO tarjeta VALUES (tarjeta_seq.NEXTVAL, 'Visa', '4532-1234-5678-9012');
INSERT INTO tarjeta VALUES (tarjeta_seq.NEXTVAL, 'MasterCard', '5555-4444-3333-2222');
INSERT INTO tarjeta VALUES (tarjeta_seq.NEXTVAL, 'American Express', '3782-8224-6310-005');

INSERT INTO fabrica VALUES (fabrica_seq.NEXTVAL, 'TechCorp S.A.', 'Ecuador');
INSERT INTO fabrica VALUES (fabrica_seq.NEXTVAL, 'Global Electronics', 'China');
INSERT INTO fabrica VALUES (fabrica_seq.NEXTVAL, 'Innovation Labs', 'Estados Unidos');

-- Confirmar los cambios
COMMIT;

-- Verificar que las tablas se crearon correctamente
SELECT table_name FROM user_tables 
WHERE table_name IN ('SUCURSAL_QS', 'CLIENTE_CHILLOGALLO', 'EMPLEADO_SUR', 'PRODUCTO', 'TARJETA', 'FABRICA', 'AUDITORIA_MASTER');

-- Verificar los datos insertados
SELECT 'Sucursales' as tabla, COUNT(*) as registros FROM sucursal_qs
UNION ALL
SELECT 'Clientes', COUNT(*) FROM cliente_chillogallo
UNION ALL
SELECT 'Empleados', COUNT(*) FROM empleado_sur
UNION ALL
SELECT 'Productos', COUNT(*) FROM producto
UNION ALL
SELECT 'Tarjetas', COUNT(*) FROM tarjeta
UNION ALL
SELECT 'Fábricas', COUNT(*) FROM fabrica;
