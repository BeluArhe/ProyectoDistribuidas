-- ============================
-- SCRIPT ESCLAVO - Quito-Norte
-- ============================

-- Eliminación previa (si existen)
BEGIN
  FOR mv IN (SELECT mview_name FROM user_mviews WHERE mview_name IN ('VW_PRODUCTO', 'VW_TARJETA', 'VW_FABRICA')) LOOP
    EXECUTE IMMEDIATE 'DROP MATERIALIZED VIEW ' || mv.mview_name;
  END LOOP;
END;
/

BEGIN
  FOR tbl IN (SELECT table_name FROM user_tables WHERE table_name IN ('SUCURSAL_QN', 'CLIENTE_CARAPUNGO', 'EMPLEADO_NORTE', 'AUDITORIA_ESCLAVO')) LOOP
    EXECUTE IMMEDIATE 'DROP TABLE ' || tbl.table_name || ' CASCADE CONSTRAINTS';
  END LOOP;
END;
/

-- Creación de Tablas fragmentadas para la región Quito-Norte

CREATE TABLE sucursal_qn (
    id_sucursal NUMBER PRIMARY KEY,
    nombre VARCHAR2(50),
    ciudad VARCHAR2(50),
    direccion VARCHAR2(100),
    CONSTRAINT chk_ciudad_esclavo CHECK (ciudad = 'Quito-Norte')
);

CREATE TABLE cliente_carapungo (
    id_cliente NUMBER PRIMARY KEY,
    nombre VARCHAR2(100),
    direccion VARCHAR2(100),
    telefono VARCHAR2(20),
    CONSTRAINT chk_direccion_esclavo CHECK (direccion = 'Carapungo')
);

CREATE TABLE empleado_norte (
    id_empleado NUMBER PRIMARY KEY,
    nombre VARCHAR2(100),
    sucursal VARCHAR2(50),
    cargo VARCHAR2(50),
    CONSTRAINT chk_sucursal_empleado_esclavo CHECK (sucursal = 'Norte')
);

-- Tabla de auditoría local
CREATE TABLE auditoria_esclavo (
    id_auditoria NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    user_name VARCHAR2(100),
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    tipo_operacion CHAR(1),
    nombre_table VARCHAR2(50),
    anterior VARCHAR2(800),
    nuevo VARCHAR2(800)
);

-- Vistas materializadas replicadas desde MASTER (solo actualización manual)
-- Estas vistas se actualizan ÚNICAMENTE mediante comando manual REFRESH

CREATE MATERIALIZED VIEW vw_producto
REFRESH COMPLETE ON DEMAND
AS
SELECT * FROM producto@dbl_master;

CREATE MATERIALIZED VIEW vw_tarjeta
REFRESH COMPLETE ON DEMAND
AS
SELECT * FROM tarjeta@dbl_master;

CREATE MATERIALIZED VIEW vw_fabrica
REFRESH COMPLETE ON DEMAND
AS
SELECT * FROM fabrica@dbl_master;

-- Triggers de auditoría para las tablas locales

CREATE OR REPLACE TRIGGER trg_audit_sucursal_qn
AFTER DELETE OR INSERT OR UPDATE ON sucursal_qn
FOR EACH ROW
DECLARE 
  v_op VARCHAR2(1);
  v_tabla VARCHAR2(20) := 'sucursal_qn';
  v_anterior VARCHAR2(800);
  v_nuevo VARCHAR2(800);
BEGIN
  IF INSERTING THEN v_op := 'I';
  ELSIF UPDATING THEN v_op := 'U';
  ELSIF DELETING THEN v_op := 'D'; END IF;
  
  IF :OLD.id_sucursal IS NOT NULL THEN
    v_anterior := :OLD.id_sucursal || '|' || :OLD.nombre || '|' || :OLD.ciudad || '|' || :OLD.direccion;
  END IF;
  
  IF :NEW.id_sucursal IS NOT NULL THEN
    v_nuevo := :NEW.id_sucursal || '|' || :NEW.nombre || '|' || :NEW.ciudad || '|' || :NEW.direccion;
  END IF;
  
  INSERT INTO auditoria_esclavo(user_name, fecha, tipo_operacion, nombre_table, anterior, nuevo)
  VALUES (USER, SYSDATE, v_op, v_tabla, v_anterior, v_nuevo);
END;
/

CREATE OR REPLACE TRIGGER trg_audit_cliente_carapungo
AFTER DELETE OR INSERT OR UPDATE ON cliente_carapungo
FOR EACH ROW
DECLARE 
  v_op VARCHAR2(1);
  v_tabla VARCHAR2(20) := 'cliente_carapungo';
  v_anterior VARCHAR2(800);
  v_nuevo VARCHAR2(800);
BEGIN
  IF INSERTING THEN v_op := 'I';
  ELSIF UPDATING THEN v_op := 'U';
  ELSIF DELETING THEN v_op := 'D'; END IF;
  
  IF :OLD.id_cliente IS NOT NULL THEN
    v_anterior := :OLD.id_cliente || '|' || :OLD.nombre || '|' || :OLD.direccion || '|' || :OLD.telefono;
  END IF;
  
  IF :NEW.id_cliente IS NOT NULL THEN
    v_nuevo := :NEW.id_cliente || '|' || :NEW.nombre || '|' || :NEW.direccion || '|' || :NEW.telefono;
  END IF;
  
  INSERT INTO auditoria_esclavo(user_name, fecha, tipo_operacion, nombre_table, anterior, nuevo)
  VALUES (USER, SYSDATE, v_op, v_tabla, v_anterior, v_nuevo);
END;
/

CREATE OR REPLACE TRIGGER trg_audit_empleado_norte
AFTER DELETE OR INSERT OR UPDATE ON empleado_norte
FOR EACH ROW
DECLARE 
  v_op VARCHAR2(1);
  v_tabla VARCHAR2(20) := 'empleado_norte';
  v_anterior VARCHAR2(800);
  v_nuevo VARCHAR2(800);
BEGIN
  IF INSERTING THEN v_op := 'I';
  ELSIF UPDATING THEN v_op := 'U';
  ELSIF DELETING THEN v_op := 'D'; END IF;
  
  IF :OLD.id_empleado IS NOT NULL THEN
    v_anterior := :OLD.id_empleado || '|' || :OLD.nombre || '|' || :OLD.sucursal || '|' || :OLD.cargo;
  END IF;
  
  IF :NEW.id_empleado IS NOT NULL THEN
    v_nuevo := :NEW.id_empleado || '|' || :NEW.nombre || '|' || :NEW.sucursal || '|' || :NEW.cargo;
  END IF;
  
  INSERT INTO auditoria_esclavo(user_name, fecha, tipo_operacion, nombre_table, anterior, nuevo)
  VALUES (USER, SYSDATE, v_op, v_tabla, v_anterior, v_nuevo);
END;
/

-- Datos de ejemplo para las tablas locales del esclavo

INSERT INTO sucursal_qn VALUES (1, 'Sucursal Carapungo', 'Quito-Norte', 'Av. Simón Bolívar y Mitad del Mundo');
INSERT INTO sucursal_qn VALUES (2, 'Sucursal Calderón', 'Quito-Norte', 'Panamericana Norte Km 15');

INSERT INTO cliente_carapungo VALUES (1, 'Andrea Morales Vega', 'Carapungo', '+593-99-888-7777');
INSERT INTO cliente_carapungo VALUES (2, 'Roberto Silva Cruz', 'Carapungo', '+593-98-666-5555');
INSERT INTO cliente_carapungo VALUES (3, 'Fernanda Jiménez Ruiz', 'Carapungo', '+593-96-444-3333');

INSERT INTO empleado_norte VALUES (1, 'Miguel Ángel Castro', 'Norte', 'Gerente Regional');
INSERT INTO empleado_norte VALUES (2, 'Isabel Vargas', 'Norte', 'Supervisora');
INSERT INTO empleado_norte VALUES (3, 'Diego Herrera', 'Norte', 'Vendedor Senior');

-- Confirmar los cambios
COMMIT;

-- Comandos para actualizar manualmente las vistas materializadas
-- (Estos comandos deben ejecutarse cuando se requiera sincronizar datos)

/*
-- Para actualizar la vista de productos:
EXEC DBMS_MVIEW.REFRESH('VW_PRODUCTO', 'C');

-- Para actualizar la vista de tarjetas:
EXEC DBMS_MVIEW.REFRESH('VW_TARJETA', 'C');

-- Para actualizar la vista de fábricas:
EXEC DBMS_MVIEW.REFRESH('VW_FABRICA', 'C');

-- Para actualizar todas las vistas a la vez:
BEGIN
  DBMS_MVIEW.REFRESH('VW_PRODUCTO', 'C');
  DBMS_MVIEW.REFRESH('VW_TARJETA', 'C');
  DBMS_MVIEW.REFRESH('VW_FABRICA', 'C');
  COMMIT;
END;
/
*/

-- Verificar que las estructuras se crearon correctamente
SELECT 'Tablas Locales' as tipo, table_name as nombre FROM user_tables 
WHERE table_name IN ('SUCURSAL_QN', 'CLIENTE_CARAPUNGO', 'EMPLEADO_NORTE', 'AUDITORIA_ESCLAVO')
UNION ALL
SELECT 'Vistas Materializadas' as tipo, mview_name as nombre FROM user_mviews 
WHERE mview_name IN ('VW_PRODUCTO', 'VW_TARJETA', 'VW_FABRICA')
ORDER BY tipo, nombre;

-- Verificar los datos insertados en tablas locales
SELECT 'Sucursales Norte' as tabla, COUNT(*) as registros FROM sucursal_qn
UNION ALL
SELECT 'Clientes Carapungo', COUNT(*) FROM cliente_carapungo
UNION ALL
SELECT 'Empleados Norte', COUNT(*) FROM empleado_norte;

-- Información sobre las vistas materializadas
SELECT mview_name, refresh_mode, refresh_method, last_refresh_date 
FROM user_mviews 
WHERE mview_name IN ('VW_PRODUCTO', 'VW_TARJETA', 'VW_FABRICA');
